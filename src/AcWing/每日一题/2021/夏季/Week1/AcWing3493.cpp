#include<iostream>

using namespace std;
/* 3499. 序列最大收益
给定一个长度为 m 的整数序列 a1,a2,…,am。
序列中每个元素的值 ai 均满足 1≤ai≤n。
当一个值为 i 的元素和一个值为 j 的元素相邻时，可以产生的收益为 wi,j。
现在，我们可以从序列中删除最多 k 个元素，删除一些元素后，原本不相邻的元素可能会变得相邻。
序列的收益和为所有相邻元素对产生的收益之和，例如一个长度为 3 的整数序列 1,3,2 的收益和为 w1,3+w3,2。
请问，通过利用删除操作，能够得到的序列的最大收益和是多少？

输入格式
第一行包含三个整数 n,k,m。
第二行包含 m 个整数 a1,a2,…,am。
接下来 n 行，每行包含 n 个整数，其中第 i 行第 j 列的数表示 wi,j。

输出格式
输出序列的最大收益和。

数据范围
对于 30% 的数据，1≤n,k,m≤20。
对于 100% 的数据，1≤n,k,m≤200，0≤wi,j≤107，1≤ai≤n。
数据保证 wi,j=wj,i，wi,i=0。

输入样例：
4 1 3
1 4 2
0 3 0 1
3 0 0 0
0 0 0 0
1 0 0 0
输出样例：
3
样例解释
初始序列收益和为 w1,4+w4,2=1+0=1。

删除中间的 4 后，序列 1,2的收益和为 w1,2=3。 */
const int N = 1e6;


int n;
itn main(){
    cin >> n;
    return 0;
}